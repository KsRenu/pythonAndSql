1.write a ddl query to create a table with 4 fields and 1 field as PK
 2 not null,1 - can be null

>>create table sample(id int primary key, name varchar(50) not null, age int not null, email varchar(100) unique key, address varchar(255));

2.Write a command to truncate a table;

>>truncate table sample;

3.alter the structure - remove unique key
>>alter table sample 

4. ddl to change the dtype of age to varchar
>> alter table sample modify column age varchar(5);

5. DDl to add 2 more fields
>> alter table sample add column occupation varchar(50), salary int;

6. change col name occupation to profession
>> alter table sample rename column occupation to profession;

7.drop a table
>>drop table sample;

8.syntax to retrieve a particular field in a table
>>select fieldname from tablename;

9. select a particular field with 2 true conditions
>> select fieldname from tablename where predicate1 and predicate2;

10. dml to retrieve all the names starting with letter r
>> select name from tablename like 'r%'; ------------concept ?

11.dml to update a row with a pk=2
>>update tablename set fieldname = value where id = 2;

12.dml to find names which has renu in it. 
>>select names from tablename where like '%renu%';

13.dml to find name start with l and end with a
>>select name from tablename where like 'l%a';

14. dml syntax to find particular count of field with a true condition.
>>select count(colname) from tablename where predicate;

15.order by default value

16.dml query syntax for inner join
>>select tab1.col1,tab2.col1
from tab1
inner join tab2
on tab1.col1 = tab2.col2

17.syntax for left join
>>select tab1.col1, tab2.col1
from tab1
left join tab2
on tab1.col1 = tab2.col1

18.d/b unique and primary

19.rules of primary keys.

20. no.of.possible unique, foreign key

21.data redundency

22.views usage ----usage

23.syntax for subquery
select colnames from tbale where colname operator (select colnames from tbale where colname operator);

24. dml syntax to find values between 2----------------------------syntax
>> select colname from tablename where colname in between(initial value, end value);

25. dml to find all student b/n roll num 10 to 20 except 17
>>select studentname ffrom student where roll between(10,20) and !=17; -------------------syntax



denormalization
Denormalization is a database optimization technique in which we add redundant data to one or more tables. 
This can help us avoid costly joins in a relational database. Note that denormalization does not mean
 ‘reversing normalization’ or ‘not to normalize’. It is an optimization technique that is applied after 
 normalization. Basically, The process of taking a normalized schema and making it non-normalized is called 
 denormalization
 Pros of Denormalization:

Retrieving data is faster since we do fewer joins
Queries to retrieve can be simpler(and therefore less likely to have bugs), 
since we need to look at fewer tables.
Cons of Denormalization:

Updates and inserts are more expensive.
Denormalization can make update and insert code harder to write.
Data may be inconsistent.
Data redundancy necessitates more storage.



cursors and usage

 A cursor in MySQL is an object that allows you to process data returned by a query row-by-row12. 
 You can use a cursor inside a stored procedure to iterate over the result set and perform operations
  on each row individually3. A cursor is read-only, non-scrollable and asensitive


d/b inner and full
trigger definition
delete and truncate
auto increment technical
having technical definition
null or zero or blank: You can use a NULL value in the INSERT statement to specify that the data is missing. /unknown value
sql injection - method to prevent
SQL injection is a technique used to extract user data by injecting web page inputs as statements through SQL commands

duplicate removal without distinct - union, intersect, join,group by, minus.
SELECT
    employee.Id,
        employee.FullName,
        employee.ManagerId,
        manager.FullName as ManagerName
FROM Employees employee
JOIN Employees manager
ON employee.ManagerId = manager.Id